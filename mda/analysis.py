import os
import textwrap
import numpy as np

from input import Parser


class Measure:
    
    def __init__(self, inputfile):
        self.inp = inputfile
        self.make_vmd_input()
        self.run()

    def load(self, topo, topo_t, traj, traj_t):
        """Load topology and trajectory
        
        Arguments:
            topo {string} -- topology file
            topo_t {string} -- topology file type
            traj {string} -- trajectory file
            traj_t {string} -- trajectory file type
        
        Returns:
            string -- tcl code to load topo and traj
        """
        
        tcl = textwrap.dedent(
                """
                # load topology and trajectory
                mol new {0} type {1}
                mol addfile {2} type {3} waitfor all
                """).format(topo, topo_t, traj, traj_t)
        
        return tcl
    
    def rg(self, outfile, sel, weight='mass'):
        """Radius of Gyration

        rg = sqrt(sum (mass(n) ( r(n) - r(com) )^2)/sum(mass(n)))
        
        Arguments:
            outfile {string} -- output file of Rg
            sel {string} -- atom selection
        
        Keyword Arguments:
            weight {string} -- weighting factor (default: {'mass'})
        
        Returns:
            string -- tcl code to measure Rg
        """
        
        tcl = textwrap.dedent(
            """
            #..........................................................
            # Raidus of Gyration script generated by mda
            #..........................................................
        
            # set output file
            set outfile [open {0} w]
        
            # select molecules
            set sel [atomselect top "{1}"]

            # loop over frames
            set nf [molinfo top get numframes]

            for {{set i 0}} {{$i < $nf}} {{incr i}} {{
                puts "frame $i of $nf"
                $sel frame $i
                
                set rg [measure rgyr $sel weight {2}]
                puts $outfile "$rg"
                
            }}

            close $outfile
            """
        ).format(outfile, sel, weight)      

        return tcl
    

    def gofr(self, outfile, sel1, sel2, delta=0.1, rmax=10.0,
             usepbc=True, selupdate=False, first=0, last=-1, step=1):
        """Radius distribution function
        
        Arguments:
            outfile {string} -- output file of gfor
            sel1 {string} -- center
            sel2 {string} -- surrounding
        
        Keyword Arguments:
            delta {float} --  bin size (default: {0.1})
            rmax {float} -- maximum r  (default: {10.0})
            usepbc {bool} -- periodic boundary condition (default: {True})
            selupdate {bool} -- update selections (default: {False})
            first {int} -- first frame (default: {0})
            last {int} -- last frame (default: {-1})
            step {int} -- step (default: {1})
        
        Returns:
            string -- tcl code to measure gofr
        """
        
        tcl = textwrap.dedent(
            """
            #..........................................................
            # gofr script generated by mda
            #..........................................................

            # set output file
            set outfile [open {0} w]
            
            # select center and surrounding
            set sel1 [atomselect top {1}]
            set sel2 [atomselect top {2}]

            set gr [measure gofr $sel1 $sel2 delta {3} rmax {4} \\
                    usepbc {5} selupdate {6} first {7} last {8} step {9}]
            
            set r [lindex $gr 0]
            set gr2 [lindex $gr 1]
            set igr [lindex $gr 2]
            foreach j $r k $gr2 l $igr {{
                puts $outfile "$j $k $l"
            }}
            close $outfile         
            """
        ).format(outfile, sel1, sel2, delta, rmax,
                 usepbc, selupdate, first, last, step)
        
        return tcl

    def sasa(self, outfile, sel, srad=1.4):
        """Solvent accessible surface area
        
        Arguments:
            outfile {string} -- output file of sasa
            sel {string} -- atom selection
        
        Keyword Arguments:
            srad {float} -- probing solvent (default: {1.4})
        
        Returns:
            string -- tcl code to measure sasa
        """                                 

        tcl = textwrap.dedent(
            """
            #..........................................................
            # sasa script generated by mda
            #..........................................................
            
            # set output file
            set outfile [open {0} w]
            
            # select molecules
            set sel [atomselect top {1}]

            # loop over frames
            set nf [molinfo top get numframes]

            for {{set i 0}} {{$i < $nf}} {{incr i}} {{
                puts "frame $i of $nf"
                $sel frame $i
                
                set sasa [measure sasa {2} $sel]
                puts $outfile "$sasa"
                
            }}

            close $outfile     
            """
        ).format(outfile, sel, srad)
        
        return tcl

    def make_vmd_input(self):
        

        topo, topo_t, traj, traj_t = \
        self.inp['topo']['path'], self.inp['topo']['type'], \
        self.inp['traj']['path'], self.inp['traj']['type']

        with open('mda.tcl', 'w') as f:
            f.write(self.load(topo, topo_t, traj, traj_t))
            
            # TODO:............................................
            f.write(self.rg('rg.dat', 'all'))
            f.write(self.gofr('gofr.dat', 'all', 'all'))
            f.write(self.sasa('sasa.dat', 'all'))
            # .................................................
    
    def run(self):
        os.system('vmd -dispdev text < mda.tcl > vmd.log')

if __name__ == '__main__':
    p = Parser('input.yaml')
    Measure(p.data)